 1.- Read data to csv
 
 2.- Build graph
    a) Link nodes
        a.a) 
        For each job calculate similarity with all other nodes
            if similarity >= 0.99, add link with weight = similarity
    b) Assign each node to a cluster
        After building links, add node to cluster
        b.a) cluster.add(job) if job.cluster == Cluster


3.- Expose api




The steps are
- Start database and load csv into it, but processing the data accordingly
    - Load csv
        - SINCE I NEED TO TREAT THIS AS IF IT WAS PROD, CHECK FOR NULL VALUES
        - Each row --> outputs a Node with its label cluster(max value from column) and all column values being properties

        LOAD CSV WITH HEADERS FROM "url" AS row
        CREATE (:baseCluster {c1:row.column1})
        ## I can get all the properties of a node with keys(node) I can then UNWIND this list to make a row out of it and apply the max function


LOAD CSV WITH HEADERS FROM "http://dropbox.jobtome.com/data/samples/job_graph_matrix.csv" AS row
CREATE (:Clust {id:row.JobId,c0:row.c0, c1:row.c1, c2:row.c2, c3:row.c3, c4:row.c4, c5:row.c5, c6:row.c6, c7:row.c7, c8:row.c8, c9:row.c9, c10:row.c10, c11:row.c11, c12:row.c12, c13:row.c13, c14:row.c14, c15:row.c15, c16:row.c16, c17:row.c17, c18:row.c18, c19:row.c19, c20:row.c20, c21:row.c21})

    - Add links between nodes if similarity >= 0.99
- Define queries done by the API endpoints
- Write Flask API endpoints that execute queries and return results



LOAD CSV WITH HEADERS FROM "http://dropbox.jobtome.com/data/samples/job_graph_matrix.csv" AS row
CREATE (:Clust {id:row.JobId, c0:toFloat(row.c0), c1:toFloat(row.c1), c2:toFloat(row.c2), c3:toFloat(row.c3), c4:toFloat(row.c4), c5:toFloat(row.c5), c6:toFloat(row.c6), c7:toFloat(row.c7), c8:toFloat(row.c8), c9:toFloat(row.c9), c10:toFloat(row.c10), c11:toFloat(row.c11), c12:toFloat(row.c12), c13:toFloat(row.c13), c14:toFloat(row.c14), c15:toFloat(row.c15), c16:toFloat(row.c16), c17:toFloat(row.c17), c18:toFloat(row.c18), c19:toFloat(row.c19), c20:toFloat(row.c20), c21:toFloat(row.c21)})

MATCH (n:Clust)
CREATE (m:MAX() )


SOLUTIONS:

1.- neo4j
2.- Flask + Custom Logic



Data pipeline:

download_data >> [get_cluster_class, normalise] >> calculate_similarity


final csv:

JobId,BelongsTo,SimilarJobId,SimilarityScore